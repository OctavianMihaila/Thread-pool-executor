/* Mihăilă Octavian-Iulian */

                     = ThreadPoolExecutor =
                     
# ThreadPoolExecutor is a thread scheduler that receives tasks to complete
 and allocates them to available threads for execution. Practically, it
 facilitates/makes running tasks in parallel more efficient.

# The running process:

    -> Init (receives two attributes from the input file):
    	1. a time quantum Q measured in milliseconds (ms) representing
    	 the maximum continuous running time of a thread
    	2. the number of available cores C, from where we deduce the
    	 maximum number of threads that can run in parallel: N = 2 * C
    	 
        The available thread pool will be created based on N.
        
        Task queues will be initialized.
        
    -> Running tasks in parallel
    
    	Tasks from the queue are taken to run until the queue is 
    	empty/there are no threads available in the pool.
    	
    	It is run only on the run command for a time given as a parameter.
	The time can be: 1 <= Q <= T or 1 <= T <= Q. It will not necessarily
	be a multiple of Q. Therefore, the system will run threads for a
	maximum of Q time at a time, after which it will the checks explained
	below. Basically, it will be a cyclic process, with step Q
    	

 
# Implementation:
	
    -> The implementation was made using stacks and queues based on generic
       lists, the structures used being described in the files queue.h and
       stack.h as well as the specific functions for operations with such
       structures, found in QueueFunctions.c and StackFunctions.c.
       
# Credits for checker files: data structures and algorithms course
 (Professor, Dr. Irina Mocanu), UPB, ACS




